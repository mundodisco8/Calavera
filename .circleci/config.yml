version: 2.1
description: This is a test with an inline Orb that simplifies the creation of fabrication outputs of KiCad projects

orbs:
  kicad-manufacturing-files:
    jobs:
      pickAndPlacePositions:
        # This job generates the pick and place positions of the components of a PCB file in an Excel file.
        parameters:
          projectPath:
            description: "[REQUIRED] Project's folder path"
            type: env_var_name
            default: PROJECT_PATH
          PCBFile:
            description: "[REQUIRED File that will be used as input."
            type: string
          includeVirtualComponentsFlag:
            description: "[OPTIONAL] Determines if components marked as \"Virtual\" should be included or not. By default they aren't, but it can be helpful if you need the positions of thinks like test pads, mounting holes, fiducials, ..."
            type: boolean
            default: false
        executor: kicad_on_ubuntu
        steps:
          - clone_script_repo_and_install_scripts
          - create_pick_and_place_file:
              projectPath: << parameters.projectPath >>
              PCBFile: << parameters.PCBFile >>
              includeVirtualComponentsFlag: << parameters.includeVirtualComponentsFlag >>
          - move_artifacts

    commands:
      clone_script_repo_and_install_scripts:
        steps:
          - run:
              name: Clone Script Repos (Move to docker?)
              # Clone repo at /, not workingdir
              command: git clone https://github.com/mundodisco8/KiCad_Python_Scripts.git /KiCad_Python_Scripts
          - run:
              name: Make scripts callable (move to docker?)
              command: |
                mv "/KiCad_Python_Scripts/Kicad Python Scripts/ExcelBomGenerator/ExcelBomGenerator.py" /usr/local/bin
                mv "/KiCad_Python_Scripts/Kicad Python Scripts/PositionsGenerator/PositionsGenerator.py" /usr/local/bin
                chmod +x /usr/local/bin/ExcelBomGenerator.py
                chmod +x /usr/local/bin/PositionsGenerator.py
          - run:
              name: This stuff should be in the docker file...
              command: |
                # Clone repo at /, not workingdir
                git clone https://github.com/SchrodingersGat/KiBoM.git /KiBoM
                pip3 install wheel
                pip3 install pillow
                pip3 install openPyXL
                #make kibom callable

      create_pick_and_place_file:
        parameters:
          projectPath:
            type: env_var_name
          PCBFile:
            type: string
          includeVirtualComponentsFlag:
            type: boolean
            default: false
        steps:
          # Need to add support to the --all thingy with the includeVirtualComponentsFlag
          - run:
              name: Generate Positions file
              # TODO: fix that projectPath thing, as it's a bit annoying as it is now
              command: PositionsGenerator.py "${<< parameters.projectPath >>}/<< parameters.PCBFile >>"
            # unless:
            #   condition: << parameters.includeVirtualComponentsFlag >> # ...but run this when the flag is false...
            #   steps:
            #     - run: PositionsGenerator.py "${<< parameters.projectPath >>}/<< parameters.PCBFile >>.kicad_pcb"

      move_artifacts:
        steps:
          - run:
              name: Store Artifacts
              command: mv *_Positions.xlsx artifacts/
          - store_artifacts:
              path: artifacts

    executors:
      kicad_on_ubuntu:
        parameters:
          version:
            type: string
            default: "19_10_11"
        docker:
          - image: mundodisco8/kicad_on_ubuntu:<<parameters.version>>
        working_directory: ~/project/

# This is outside of the orb!

workflows:
  version: 2.1
  createAndDeploy:
      jobs:
        - kicad-manufacturing-files/pickAndPlacePositions:
            name: Get Pick And Place Positions # best practice is to name each orb job
            projectPath: PROJECT_PATH
            PCBFile: "Calavera.kicad_pcb"
            includeVirtualComponentsFlag: false
            pre-steps:
              - checkout # default working directory is "/project"
              - run:
                  name: "Setup custom environment variables"
                  command: |
                    # TODO: it would be cool to set a default project path to working dir, and be able to override it
                    echo 'export PROJECT_PATH="/root/project"' >> $BASH_ENV # Redirect MY_ENV_VAR into $BASH_ENV
              - run:
                  name: Create artifacts folder
                  command: mkdir artifacts